# meta developer: @PluginIDEbot
# meta banner: https://yufic.ru/api/hc/?a=VideoDownloader&b=@PluginIDEbot
# meta name: VideoDownloader
# requires: yt-dlp

import os
import asyncio
import logging
import re
import glob
import time
import concurrent.futures
from urllib.parse import urlparse, parse_qs
from collections import deque

from telethon.tl.types import Message, DocumentAttributeVideo, DocumentAttributeFilename, DocumentAttributeAnimated
from telethon.tl.types import MessageEntityTextUrl, MessageEntityUrl, MessageEntityMention, MessageEntityHashtag, MessageEntityCashtag, MessageEntityBotCommand, MessageEntityUrl, MessageEntityEmail, MessageEntityPhone, MessageEntityBold, MessageEntityItalic, MessageEntityCode, MessageEntityPre, MessageEntityTextUrl, MessageEntityMentionName, MessageEntityPhone, MessageEntityCashtag, MessageEntityUnderline, MessageEntityStrike, MessageEntityBlockquote, MessageEntityBankCard, MessageEntitySpoiler, MessageEntityCustomEmoji
from telethon.errors import FloodWaitError, RPCError, MessageNotModifiedError
from .. import loader, utils

logger = logging.getLogger(__name__)

class DownloadProgress:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    def __init__(self, message, total_size=0, update_interval=2):
        self.message = message
        self.total_size = total_size
        self.downloaded = 0
        self.start_time = time.time()
        self.last_update = 0
        self.update_interval = update_interval  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥—ã
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.emojis = ['‚¨ú', '‚¨ú', '‚¨ú', '‚¨ú', '‚¨ú', '‚¨ú', '‚¨ú', '‚¨ú', '‚¨ú', '‚¨ú']
        self.download_emojis = ['‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ', '‚¨õ']
        
    async def update_progress(self, downloaded, total, speed=0):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (async)"""
        try:
            current_time = time.time()
            if (current_time - self.last_update) < self.update_interval and downloaded < total:
                return  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
                
            self.downloaded = downloaded
            self.last_update = current_time
            
            if total > 0:
                percent = min(100, int((downloaded / total) * 100))
                bar_length = 10
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                filled_length = int(bar_length * downloaded / total)
                progress_bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
                
                # –≠–º–æ–¥–∑–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
                emoji_bar = ''.join(self.download_emojis[:filled_length] + self.emojis[filled_length:])
                
                # –°–∫–æ—Ä–æ—Å—Ç—å
                elapsed = current_time - self.start_time
                if elapsed > 0 and downloaded > 0:
                    speed_mb = downloaded / (1024 * 1024) / elapsed
                    eta = (total - downloaded) / (1024 * 1024) / speed_mb if speed_mb > 0 else 0
                else:
                    speed_mb = 0
                    eta = 0
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                if eta > 3600:
                    eta_str = f"{int(eta//3600)}—á {int((eta%3600)//60)}–º"
                elif eta > 60:
                    eta_str = f"{int(eta//60)}–º {int(eta%60)}—Å"
                else:
                    eta_str = f"{int(eta)}—Å"
                
                # –†–∞–∑–º–µ—Ä—ã
                downloaded_mb = downloaded / (1024 * 1024)
                total_mb = total / (1024 * 1024)
                
                progress_text = (
                    f"üì• <b>–°–∫–∞—á–∏–≤–∞—é...</b>\n"
                    f"{emoji_bar} <b>{percent}%</b>\n"
                    f"<code>{progress_bar}</code>\n"
                    f"üíæ <b>{downloaded_mb:.1f}/{total_mb:.1f} MB</b>\n"
                    f"‚ö° <b>{speed_mb:.1f} MB/s</b> | ‚è± <b>–û—Å—Ç–∞–ª–æ—Å—å: {eta_str}</b>"
                )
                
                try:
                    await self.message.edit(progress_text)
                except MessageNotModifiedError:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                except Exception as e:
                    logger.debug(f"Progress edit error: {e}")
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∞–Ω–Ω–æ–µ
                downloaded_mb = downloaded / (1024 * 1024)
                elapsed = current_time - self.start_time
                speed_mb = downloaded_mb / elapsed if elapsed > 0 else 0
                
                progress_text = (
                    f"üì• <b>–°–∫–∞—á–∏–≤–∞—é...</b>\n"
                    f"üíæ <b>{downloaded_mb:.1f} MB</b>\n"
                    f"‚ö° <b>{speed_mb:.1f} MB/s</b>"
                )
                
                try:
                    await self.message.edit(progress_text)
                except MessageNotModifiedError:
                    pass
                except Exception as e:
                    logger.debug(f"Progress edit error (unknown size): {e}")
                
        except Exception as e:
            logger.debug(f"Progress update error: {e}")
            pass

    def finish(self, final_size):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        self.total_size = final_size
        self.downloaded = final_size

@loader.tds
class VideoDownloader(loader.Module):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫: —Ä–µ–ø–ª–∞–π –Ω–∞ —Å—Å—ã–ª–∫–∏/–≤–∏–¥–µ–æ/GIF/–∞—É–¥–∏–æ + 100+ –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""

    strings = {
        "name": "VideoDownloader",
        "version_check": (
            "üöÄ <b>VideoDownloader v2025.3 - –ü–†–û–ì–†–ï–°–°-–ë–ê–† + –†–ï–ü–õ–ê–ô –ë–ï–ó COOKIES!</b>\n\n"
            "üìä <b>–ù–æ–≤—ã–µ —Ñ–∏—á–∏:</b>\n"
            "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (%, —Å–∫–æ—Ä–æ—Å—Ç—å, ETA)\n"
            "‚Ä¢ –†–µ–ø–ª–∞–π –Ω–∞ —Å—Å—ã–ª–∫–∏ (–∞–≤—Ç–æ—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ)\n"
            "‚Ä¢ –†–µ–ø–ª–∞–π –Ω–∞ –≤–∏–¥–µ–æ/GIF/–∞—É–¥–∏–æ\n"
            "‚Ä¢ YouTube –±–µ–∑ cookies (fallback)\n"
            "‚Ä¢ TikTok, Instagram +100\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "<code>.domp</code> (–∞–≤—Ç–æ + –ø—Ä–æ–≥—Ä–µ—Å—Å)\n"
            "<code>.domp https://tiktok.com/@user/video/123</code>\n"
            "<i>–ê–≤—Ç–æ: YouTube‚ÜíTikTok‚ÜíInstagram + fallback –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</i>\n\n"
            "<b>üÜï –ë–µ–∑ cookies: YouTube –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ/–∞—É–¥–∏–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ</b>"
        ),
        "working": "üîÑ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–ø–ª–∞–π...</b>",
        "ready": "‚úÖ <b>–ì–æ—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º!</b>\n<i>yt-dlp: v{version} | –†–µ–ø–ª–∞–π: ‚úì | –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {count} | Cookies: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ</i>",
        "install_yt_dlp": (
            "‚ùå <b>yt-dlp –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!</b>\n\n"
            "<b>üöÄ –£–°–¢–ê–ù–û–í–ö–ê:</b>\n"
            "<code>pip install yt-dlp==2024.4.9</code>\n\n"
            "<b>Heroku:</b>\n"
            "1. <code>echo 'yt-dlp==2024.4.9' >> requirements.txt</code>\n"
            "2. <code>git add . && git commit -m 'add yt-dlp' && git push</code>\n\n"
            "<b>–ü—Ä–æ–≤–µ—Ä–∫–∞:</b>\n"
            "<code>.vdtest</code>\n\n"
            "<b>üí° –ë–µ–∑ cookies YouTube –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - fallback –Ω–∞ –∞—É–¥–∏–æ/–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</b>"
        ),
        "install_ffmpeg": (
            "‚ö†Ô∏è <b>FFmpeg –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>\n\n"
            "<b>–î–ª—è –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b>\n"
            "<code>sudo apt install ffmpeg</code>\n"
            "<code>brew install ffmpeg</code>\n\n"
            "<b>Heroku buildpack:</b>\n"
            "<code>heroku buildpacks:add https://github.com/jonathanong/heroku-buildpack-ffmpeg-latest.git</code>"
        ),
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b>\n<i>{}</i>",
        "no_content": "‚ùå <b>–†–µ–ø–ª–∞–π –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n<i>–†–µ–ø–ª–∞–π–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏–ª–∏ –º–µ–¥–∏–∞</i>",
        "success": "‚úÖ <b>{type} –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>",
        "download_failed": (
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å {platform}</b>\n<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç</i>\n\n"
            "<b>üîß –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ <code>.vdtest</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "‚Ä¢ –ï—Å–ª–∏ —Ñ–∞–π–ª >50MB: fallback –Ω–∞ –∞—É–¥–∏–æ/–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
            "‚Ä¢ –ü—Ä—è–º—ã–µ MP4/MP3 —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º\n"
            "‚Ä¢ –î–ª—è {platform}: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç"
        ),
        "processing": "‚è≥ <b>–°–∫–∞—á–∏–≤–∞—é {type}...</b>",
        "video_info": (
            "üìπ <b>{title}</b>\n"
            "üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}\n"
            "‚è± <b>{duration}</b> | üíæ <b>{size}</b>"
        ),
        "link_reply": (
            "üîó <b>–°—Å—ã–ª–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!</b>\n"
            "üåê <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform}\n"
            "‚è≥ <b>–°–∫–∞—á–∏–≤–∞—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º...</b>"
        ),
        "media_reply": (
            "üíæ <b>–ú–µ–¥–∏–∞ –∏–∑ —Ä–µ–ø–ª–∞—è!</b>\n"
            "üìÅ <b>{filename}</b>\n"
            "‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...</b>"
        ),
        "reply_success": (
            "‚úÖ <b>–ò–∑ —Ä–µ–ø–ª–∞—è!</b>\n"
            "üìÅ <b>{filename}</b>\n"
            "üíæ <b>{size}</b>"
        ),
        "not_media": "‚ùå <b>–ù–µ –º–µ–¥–∏–∞/—Å—Å—ã–ª–∫–∞!</b>\n<i>–†–µ–ø–ª–∞–π–Ω–∏—Ç–µ –Ω–∞ –≤–∏–¥–µ–æ, GIF, –∞—É–¥–∏–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É</i>",
        "large_file": "‚ö†Ô∏è <b>–§–∞–π–ª >50MB</b>\n<i>Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ. Fallback: –∞—É–¥–∏–æ/–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</i>",
        "source_detected": "üîç <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}</b>\n‚è≥ <b>–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ‚Üí –°–∫–∞—á–∏–≤–∞—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º</b>",
        "url_fixed": "üîß <b>URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω</b>",
        "playlist_warning": "üìã <b>–ü–ª–µ–π–ª–∏—Å—Ç</b>\n‚è≥ –ë–µ—Ä—É –ø–µ—Ä–≤–æ–µ",
        "audio_only": "üéµ <b>–ê—É–¥–∏–æ (fallback –±–µ–∑ cookies)</b>\nüíæ <b>{format}</b>",
        "gif_detected": "üé≠ <b>GIF</b>\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é",
        "youtube_auth_error": (
            "üö´ <b>YouTube: fallback –±–µ–∑ cookies</b>\n\n"
            "<b>üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</b>\n"
            "‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (480p)\n"
            "‚Ä¢ –ò–ª–∏ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ (MP3)\n"
            "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...\n\n"
            "<b>üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
            "<code>.vdhelp cookies</code>\n\n"
            "<i>–ë–µ–∑ cookies: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤–∏–¥–µ–æ —Å –∑–∞—â–∏—Ç–æ–π</i>"
        ),
        "cookies_not_set": (
            "‚ö†Ô∏è <b>Cookies –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã</b>\n\n"
            "<b>YouTube –±–µ–∑ cookies:</b>\n"
            "‚Ä¢ Fallback: 480p –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ\n"
            "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≤–∏–¥–µ–æ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å\n\n"
            "<b>üîó –ï—Å–ª–∏ –Ω—É–∂–Ω–æ:</b>\n"
            "<code>.vdhelp cookies</code>"
        ),
        "platforms_list": (
            "üåê <b>–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ü–õ–ê–¢–§–û–†–ú–´ (100+ –±–µ–∑ cookies):</b>\n\n"
            "<b>üì∫ –í–∏–¥–µ–æ:</b>\n"
            "‚Ä¢ YouTube (fallback 480p/–∞—É–¥–∏–æ)\n"
            "‚Ä¢ TikTok (–≤–∏–¥–µ–æ, –¥—É—ç—Ç—ã)\n"
            "‚Ä¢ Instagram (Reels, Posts)\n"
            "‚Ä¢ Twitter/X (–≤–∏–¥–µ–æ)\n"
            "‚Ä¢ Facebook, VK +100\n\n"
            "<b>üéµ –ê—É–¥–∏–æ:</b>\n"
            "‚Ä¢ SoundCloud, Spotify\n"
            "‚Ä¢ Deezer, Bandcamp\n\n"
            "<b>üì± –°–æ—Ü—Å–µ—Ç–∏:</b>\n"
            "‚Ä¢ Reddit, Pinterest\n"
            "‚Ä¢ Tumblr, Vimeo\n\n"
            "<b>üì∫ –ü—Ä—è–º—ã–µ:</b>\n"
            "‚Ä¢ MP4, WebM, MP3 —Ñ–∞–π–ª—ã\n\n"
            "<b>üîß yt-dlp: 1000+ —Å–∞–π—Ç–æ–≤</b>\n"
            "<i>–°–ø–∏—Å–æ–∫: https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md</i>"
        ),
        "debug_info": (
            "üîß <b>DIAGNOSTICS v2025.3 (–±–µ–∑ cookies):</b>\n\n"
            "üì¶ <b>yt-dlp:</b> {version}\n"
            "‚öôÔ∏è <b>FFmpeg:</b> {ffmpeg}\n"
            "üç™ <b>Cookies:</b> –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (fallback OK)\n"
            "üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä:</b> ‚úì\n"
            "üîó <b>–†–µ–ø–ª–∞–π —Å—Å—ã–ª–∫–∏:</b> ‚úì\n"
            "üíæ <b>–†–µ–ø–ª–∞–π –º–µ–¥–∏–∞:</b> ‚úì\n"
            "üåê <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b> {count}\n\n"
            "üöÄ <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
        ),
        "reply_help": (
            "üîó <b>–†–ï–ü–õ–ê–ô –ù–ê –°–°–´–õ–ö–ò –° –ü–†–û–ì–†–ï–°–°–û–ú (–±–µ–∑ cookies):</b>\n\n"
            "<b>‚úÖ –°–°–´–õ–ö–ò:</b>\n"
            "‚Ä¢ YouTube (fallback 480p/–∞—É–¥–∏–æ)\n"
            "‚Ä¢ TikTok, Instagram Reels\n"
            "‚Ä¢ Twitter, VK +100\n\n"
            "<b>‚úÖ –ú–ï–î–ò–ê:</b>\n"
            "‚Ä¢ –í–∏–¥–µ–æ (MP4, GIF)\n"
            "‚Ä¢ –ê—É–¥–∏–æ (MP3, OGG)\n\n"
            "<b>üìä –ü–†–û–ì–†–ï–°–°:</b>\n"
            "‚Ä¢ % –∑–∞–≥—Ä—É–∑–∫–∏ + –±–∞—Ä\n"
            "‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å MB/s\n"
            "‚Ä¢ ETA –≤—Ä–µ–º—è\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>[—Å—Å—ã–ª–∫–∞]</code> ‚Üì <code>.domp</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>‚¨õ‚¨õ‚¨ú‚¨ú... 45% | 2.1 MB/s | 1–º 23—Å</code>"
        ),
        "terminal_install": (
            "üíª <b>–£–°–¢–ê–ù–û–í–ö–ê –ë–ï–ó COOKIES:</b>\n\n"
            "<b>1. yt-dlp:</b>\n"
            "<code>pip install yt-dlp==2024.4.9</code>\n\n"
            "<b>2. FFmpeg (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):</b>\n"
            "<code>sudo apt install ffmpeg</code>\n\n"
            "<b>3. Cookies (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</b>\n"
            "<code># –ë–µ–∑ cookies: fallback –Ω–∞ –∞—É–¥–∏–æ/480p</code>\n"
            "<code># –î–ª—è –ø–æ–ª–Ω–æ–≥–æ YouTube: .vdhelp cookies</code>\n\n"
            "<b>4. –¢–µ—Å—Ç:</b>\n"
            "<code>.vdtest</code>\n"
            "<code>[YouTube] ‚Üì .domp</code>\n\n"
            "<b>Heroku:</b>\n"
            "<code>echo 'yt-dlp==2024.4.9' >> requirements.txt</code>\n"
            "<code>git push</code>"
        ),
        "cookies_help": (
            "üç™ <b>COOKIES –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´ –î–õ–Ø YOUTUBE:</b>\n\n"
            "<b>–ë–µ–∑ cookies (fallback):</b>\n"
            "‚Ä¢ 480p –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ (MP3)\n"
            "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≤–∏–¥–µ–æ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å\n"
            "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n"
            "<b>–° cookies (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø):</b>\n"
            "‚Ä¢ HD –≤–∏–¥–µ–æ (720p+), –ø–ª–µ–π–ª–∏—Å—Ç—ã\n"
            "‚Ä¢ –û–±—Ö–æ–¥ 'Sign in to confirm'\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):</b>\n"
            "1. <b>Chrome:</b> –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ 'Get cookies.txt LOCALLY'\n"
            "   ‚Ä¢ YouTube ‚Üí –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Üí Export\n"
            "2. <b>Firefox:</b> 'cookies.txt' ‚Üí Export\n"
            "3. <b>–û–Ω–ª–∞–π–Ω:</b> https://puppeteers.net/cookies\n\n"
            "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
            "‚Ä¢ .config ‚Üí cookies_path: <code>cookies.txt</code>\n"
            "‚Ä¢ git add cookies.txt && git push\n\n"
            "<b>üîó –î–æ–∫–∏:</b>\n"
            "https://github.com/yt-dlp/yt-dlp/wiki/FAQ#how-do-i-pass-cookies-to-yt-dlp"
        )
    }

    def __init__(self):
        self.temp_files = set()
        self.download_dir = "downloads"
        self.yt_dlp_version = None
        self.progress_instance = None
        self.progress_queue = asyncio.Queue()  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –ø–æ—Ç–æ–∫–∞
        self.supported_mime = {
            'video': ['video/mp4', 'video/webm', 'video/x-msvideo', 'video/avi', 'video/mpeg', 'video/quicktime'],
            'gif': ['image/gif', 'video/gif'],
            'audio': ['audio/mpeg', 'audio/mp4', 'audio/wav', 'audio/ogg', 'audio/flac', 'audio/x-wav'],
            'voice': ['audio/ogg']
        }
        self.supported_ext = {
            'video': ['.mp4', '.webm', '.avi', '.mkv', '.mov', '.wmv', '.flv', '.3gp', '.m4v'],
            'audio': ['.mp3', '.m4a', '.wav', '.flac', '.aac', '.ogg'],
            'gif': ['.gif']
        }
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "cookies_path",
                "",
                lambda: self.strings("cookies_help"),
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "progress_update_interval",
                2,
                lambda: "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1-5)",
                validator=loader.validators.Integer()
            )
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        
        os.makedirs(self.download_dir, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.yt_dlp_version = await self._get_yt_dlp_version()
        self.ffmpeg_available = await self._check_ffmpeg()
        
        cookies_status = "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ" if not self.config["cookies_path"] else "‚úì"
        
        logger.info(f"üöÄ VideoDownloader v2025.3 - –ü–†–û–ì–†–ï–°–° + –ë–ï–ó COOKIES")
        logger.info(f"yt-dlp: {self.yt_dlp_version}")
        logger.info(f"FFmpeg: {self.ffmpeg_available}")
        logger.info(f"Cookies: {cookies_status} (fallback OK)")
        logger.info(f"Reply support: Links + Media ‚úì")
        logger.info(f"Progress queue: Enabled for thread safety")
        
        # –°—Ç–∞—Ç—É—Å –≤ –õ–°
        try:
            if self.yt_dlp_version:
                await utils.answer(
                    await client.get_messages('me', limit=1),
                    self.strings("ready").format(
                        version=self.yt_dlp_version,
                        count="100+"
                    )
                )
                await utils.answer(
                    await client.get_messages('me', limit=1),
                    self.strings("version_check")
                )
            else:
                await utils.answer(
                    await client.get_messages('me', limit=1),
                    self.strings("install_yt_dlp")
                )
        except:
            pass

    async def _get_yt_dlp_version(self):
        """–í–µ—Ä—Å–∏—è yt-dlp"""
        try:
            import yt_dlp
            version = getattr(yt_dlp.version, '__version__', None)
            if version:
                logger.info(f"yt-dlp v{version}")
                return version
            return None
        except ImportError:
            return None

    async def _check_ffmpeg(self):
        """FFmpeg"""
        try:
            import subprocess
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=10)
            return result.returncode == 0
        except:
            return False

    def _extract_urls_from_text(self, message: Message) -> list[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç—ã—Ö URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º entities"""
        urls = []
        try:
            if not message or not message.text:
                return urls

            text_lower = message.text.lower()
            
            # 1. –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ URL –≤ —Ç–µ–∫—Å—Ç–µ (fallback)
            url_pattern = r'https?://[^\s<>"]+'
            matches = re.findall(url_pattern, message.text)
            for match in matches:
                # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                clean_url = re.sub(r'<[^>]*>', '', match).strip()
                if clean_url and clean_url.startswith('http') and len(clean_url) > 10:
                    urls.append(clean_url)

            # 2. –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ entities (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            if hasattr(message, 'entities') and message.entities:
                text_offset = 0
                for entity in message.entities:
                    if isinstance(entity, (MessageEntityTextUrl, MessageEntityUrl)):
                        if isinstance(entity, MessageEntityTextUrl):
                            url = entity.url
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∞–ª–∏–¥–Ω—ã–π –ª–∏ URL
                            if url and url.startswith('http') and len(url) > 10:
                                urls.append(url)
                        else:  # MessageEntityUrl
                            start = text_offset + entity.offset
                            end = start + entity.length
                            url_text = message.text[start:end]
                            # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑ url_text
                            clean_url_text = re.sub(r'<[^>]*>', '', url_text).strip()
                            if clean_url_text and clean_url_text.startswith('http') and len(clean_url_text) > 10:
                                urls.append(clean_url_text)
                            # Fallback: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç YouTube ID, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å
                            if 'youtube' in text_lower:
                                yt_match = re.search(r'v=([a-zA-Z0-9_-]{11})', clean_url_text)
                                if yt_match:
                                    video_id = yt_match.group(1)
                                    if len(video_id) == 11:
                                        urls.append(f"https://www.youtube.com/watch?v={video_id}")

                    text_offset += entity.length

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            urls = list(set(urls))
            logger.debug(f"Extracted URLs from text: {urls}")

        except Exception as e:
            logger.error(f"Error extracting URLs from text: {e}")

        return urls

    def _is_reply_content(self, message: Message) -> tuple[bool, dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–µ–ø–ª–∞—è"""
        try:
            if not message:
                return False, {}
                
            content_type = None
            content_data = {}
            text_lower = message.text.lower() if message.text else ""
            
            # 1. –ü–†–û–í–ï–†–ö–ê –ù–ê –°–°–´–õ–ö–£ –í –¢–ï–ö–°–¢–ï
            if message.text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–µ URL
                extracted_urls = self._extract_urls_from_text(message)
                
                # YouTube —Å—Å—ã–ª–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
                youtube_patterns = [
                    r'(?:https?://)?(?:www\.)?(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/|youtube\.com/shorts/|youtube-nocookie\.com/embed/|m\.youtube\.com/watch\?v=|youtube\.com/v/|youtube\.com/playlist\?list=|youtube\.com/channel/)([a-zA-Z0-9_-]{11})',
                    r'youtube\.com/watch\?v=([a-zA-Z0-9_-]{11})',
                    r'youtu\.be/([a-zA-Z0-9_-]{11})',
                    r'v=([a-zA-Z0-9_-]{11})'  # Fallback –¥–ª—è ID –≤ —Ç–µ–∫—Å—Ç–µ
                ]
                
                for url in extracted_urls:
                    url_lower = url.lower()
                    for pattern in youtube_patterns:
                        match = re.search(pattern, url)
                        if match:
                            video_id = match.group(1)
                            if len(video_id) == 11:
                                content_type = 'youtube_link'
                                content_data = {
                                    'type': 'link',
                                    'platform': 'YouTube',
                                    'url': f"https://www.youtube.com/watch?v={video_id}",
                                    'text': message.text,
                                    'video_id': video_id,
                                    'original_urls': extracted_urls
                                }
                                logger.info(f"Reply link detected: YouTube {video_id}")
                                return True, content_data
                
                # Fallback: –µ—Å–ª–∏ 'youtube' –≤ —Ç–µ–∫—Å—Ç–µ, –∏—â–µ–º ID
                if 'youtube' in text_lower and not content_type:
                    yt_match = re.search(r'v=([a-zA-Z0-9_-]{11})', message.text)
                    if yt_match:
                        video_id = yt_match.group(1)
                        if len(video_id) == 11:
                            content_type = 'youtube_link'
                            content_data = {
                                'type': 'link',
                                'platform': 'YouTube',
                                'url': f"https://www.youtube.com/watch?v={video_id}",
                                'text': message.text,
                                'video_id': video_id,
                                'original_urls': extracted_urls
                            }
                            logger.info(f"Reply fallback YouTube ID: {video_id}")
                            return True, content_data

                # TikTok —Å—Å—ã–ª–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è musical.ly)
                tiktok_patterns = [
                    r'(?:https?://)?(?:www\.)?(?:tiktok\.com/@[^/]+/video/|vm\.tiktok\.com/|musical\.ly/)([0-9]+)',
                    r'tiktok\.com/@[^/]+/video/([0-9]+)',
                    r'vm\.tiktok\.com/([a-zA-Z0-9]+)'
                ]
                
                for url in extracted_urls:
                    url_lower = url.lower()
                    for pattern in tiktok_patterns:
                        match = re.search(pattern, url)
                        if match:
                            video_id = match.group(1)
                            content_type = 'tiktok_link'
                            content_data = {
                                'type': 'link',
                                'platform': 'TikTok',
                                'url': url,
                                'text': message.text,
                                'video_id': video_id,
                                'original_urls': extracted_urls
                            }
                            logger.info(f"Reply link detected: TikTok {video_id}")
                            return True, content_data
                
                # Fallback –¥–ª—è TikTok (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
                if 'tiktok' in text_lower and not content_type:
                    tt_match = re.search(r'(?:tiktok\.com/@[^/]+/video/|vm\.tiktok\.com/|musical\.ly/)([0-9]+)', message.text)
                    if tt_match:
                        video_id = tt_match.group(1)
                        content_type = 'tiktok_link'
                        content_data = {
                            'type': 'link',
                            'platform': 'TikTok',
                            'url': f"https://www.tiktok.com/@user/video/{video_id}",
                            'text': message.text,
                            'video_id': video_id,
                            'original_urls': extracted_urls
                        }
                        logger.info(f"Reply fallback TikTok ID: {video_id}")
                        return True, content_data

                # Instagram —Å—Å—ã–ª–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è /tv/)
                instagram_patterns = [
                    r'(?:https?://)?(?:www\.)?instagram\.com/(?:p|reel|tv)/([a-zA-Z0-9_-]+)',
                    r'instagram\.com/(?:stories|reel)/[^/]+/([a-zA-Z0-9_-]+)'
                ]
                
                for url in extracted_urls:
                    url_lower = url.lower()
                    for pattern in instagram_patterns:
                        match = re.search(pattern, url)
                        if match:
                            post_id = match.group(1)
                            content_type = 'instagram_link'
                            content_data = {
                                'type': 'link',
                                'platform': 'Instagram',
                                'url': url,
                                'text': message.text,
                                'post_id': post_id,
                                'original_urls': extracted_urls
                            }
                            logger.info(f"Reply link detected: Instagram {post_id}")
                            return True, content_data

                # Twitter —Å—Å—ã–ª–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
                twitter_patterns = [
                    r'(?:https?://)?(?:www\.)?(?:twitter\.com|x\.com)/[^/]+/status/([0-9]+)',
                    r'(?:twitter\.com|x\.com)/i/web/status/([0-9]+)'
                ]
                
                for url in extracted_urls:
                    url_lower = url.lower()
                    for pattern in twitter_patterns:
                        match = re.search(pattern, url)
                        if match:
                            status_id = match.group(1)
                            content_type = 'twitter_link'
                            content_data = {
                                'type': 'link',
                                'platform': 'Twitter',
                                'url': url,
                                'text': message.text,
                                'status_id': status_id,
                                'original_urls': extracted_urls
                            }
                            logger.info(f"Reply link detected: Twitter {status_id}")
                            return True, content_data

                # –û–±—â–∏–µ —Å—Å—ã–ª–∫–∏ (–ª—é–±—ã–µ http/https)
                if extracted_urls:
                    for url in extracted_urls:
                        platform = self._detect_platform(url)
                        if platform != "Unknown":
                            content_type = f'{platform.lower()}_link'
                            content_data = {
                                'type': 'link',
                                'platform': platform,
                                'url': url,
                                'text': message.text,
                                'full_text': True,
                                'original_urls': extracted_urls
                            }
                            logger.info(f"Reply link detected: {platform}")
                            return True, content_data

            # 2. –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–ï–î–ò–ê
            media_type, file_ext = self._get_media_type(message)
            if media_type:
                content_type = f'{media_type}_media'
                content_data = {
                    'type': 'media',
                    'media_type': media_type,
                    'file_ext': file_ext,
                    'message': message
                }
                logger.info(f"Reply media detected: {media_type}")
                return True, content_data

            return False, {}
            
        except Exception as e:
            logger.error(f"Reply content check error: {e}")
            return False, {}

    def _get_media_type(self, message: Message) -> tuple[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞"""
        try:
            if not message or not hasattr(message, 'media'):
                return None, None

            # –í–∏–¥–µ–æ
            if hasattr(message, 'video') and message.video:
                return 'video', 'mp4'

            # –î–æ–∫—É–º–µ–Ω—Ç
            if hasattr(message, 'document') and message.document:
                doc = message.document
                mime_type = getattr(doc, 'mime_type', '').lower()
                
                # –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
                if any(vmime in mime_type for vmime in self.supported_mime['video']):
                    ext = 'mp4'
                    if 'webm' in mime_type:
                        ext = 'webm'
                    elif 'avi' in mime_type:
                        ext = 'avi'
                    return 'video', ext
                
                # GIF
                if any(gmime in mime_type for gmime in self.supported_mime['gif']):
                    return 'gif', 'gif'
                
                # –ê—É–¥–∏–æ
                if any(amime in mime_type for amime in self.supported_mime['audio']):
                    ext = 'mp3'
                    if 'm4a' in mime_type:
                        ext = 'm4a'
                    elif 'wav' in mime_type:
                        ext = 'wav'
                    return 'audio', ext
                
                # –ì–æ–ª–æ—Å–æ–≤—ã–µ (OGG)
                if 'ogg' in mime_type:
                    return 'voice', 'ogg'

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                if hasattr(doc, 'attributes') and doc.attributes:
                    for attr in doc.attributes:
                        attr_type = type(attr).__name__
                        
                        if attr_type == 'DocumentAttributeVideo':
                            return 'video', 'mp4'
                        elif attr_type == 'DocumentAttributeAnimated':
                            return 'gif', 'gif'
                        
                        # –ò–º—è —Ñ–∞–π–ª–∞
                        if attr_type == 'DocumentAttributeFilename':
                            filename = getattr(attr, 'file_name', '').lower()
                            
                            for media_t, exts in self.supported_ext.items():
                                for ext in exts:
                                    if ext in filename:
                                        return media_t, ext[1:]  # –±–µ–∑ —Ç–æ—á–∫–∏

            return None, None
            
        except Exception as e:
            logger.error(f"Media type error: {e}")
            return None, None

    def _detect_platform(self, url: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            url_lower = url.lower()
            
            # TikTok (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω–æ–≥–æ YouTube)
            if any(domain in url_lower for domain in ['tiktok.com', 'vm.tiktok.com', 'musical.ly']):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ—Ç YouTube –≤ URL
                if 'youtube' not in url_lower:
                    return "TikTok"
            
            # YouTube (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if any(ind in url_lower for ind in ['youtube.com', 'youtu.be', 'youtube-nocookie.com', 'm.youtube.com', 'watch?v=', 'shorts/', 'embed/', 'v/']):
                return "YouTube"
            
            # Instagram
            if 'instagram.com' in url_lower and any(path in url_lower for path in ['/reel/', '/p/', '/tv/', '/stories/']):
                return "Instagram"
            
            # Twitter/X
            if any(domain in url_lower for domain in ['twitter.com', 'x.com']) and any(path in url_lower for path in ['/status/', '/i/web/status/']):
                return "Twitter"
            
            # Facebook
            if 'facebook.com' in url_lower and any(path in url_lower for path in ['/watch/', '/video/', '/reel/', '?v=']):
                return "Facebook"
            
            # VK
            if 'vk.com' in url_lower and any(path in url_lower for path in ['/video', '/clip']):
                return "VK"
            
            # SoundCloud
            if 'soundcloud.com' in url_lower and any(path in url_lower for path in ['/track/', '/sets/', '/playlist/']):
                return "SoundCloud"
            
            # Twitch
            if 'twitch.tv' in url_lower and any(path in url_lower for path in ['/videos/', '/clip/', '/v/']):
                return "Twitch"
            
            # Reddit
            if 'reddit.com' in url_lower and any(path in url_lower for path in ['/comments/', '/r/']):
                return "Reddit"
            
            # Pinterest
            if 'pinterest.com' in url_lower and '/pin/' in url_lower:
                return "Pinterest"
            
            # Tumblr
            if 'tumblr.com' in url_lower and any(path in url_lower for path in ['/post/', '/video/']):
                return "Tumblr"
            
            # Vimeo
            if 'vimeo.com' in url_lower and any(path in url_lower for path in ['/video/', '/channels/', '/groups/']):
                return "Vimeo"
            
            # Dailymotion
            if 'dailymotion.com' in url_lower and any(path in url_lower for path in ['/video/', '/embed/']):
                return "Dailymotion"
            
            # Rumble
            if 'rumble.com' in url_lower and any(path in url_lower for path in ['/v', '/embed/']):
                return "Rumble"
            
            # Bitchute
            if 'bitchute.com' in url_lower and any(path in url_lower for path in ['/video/', '/embed/']):
                return "Bitchute"
            
            # –ü—Ä—è–º—ã–µ —Ñ–∞–π–ª—ã
            if any(ext in url_lower for ext in ['.mp4', '.webm', '.avi', '.mkv', '.mp3', '.m4a']):
                return "Direct File"
            
            return "Other"
        except:
            return "Unknown"

    def _fix_url(self, url: str, platform: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL"""
        try:
            original = url.strip()
            
            if not original.startswith(('http', 'https')):
                if platform in ['YouTube', 'TikTok', 'Instagram', 'Twitter']:
                    url = 'https://' + original
                else:
                    url = original
            else:
                url = original
            
            # YouTube youtu.be –∏ –¥—Ä—É–≥–∏–µ
            if platform == "YouTube":
                if 'youtu.be/' in url:
                    video_id = url.split('youtu.be/')[1].split('?')[0].split('/')[0][:11]
                    if len(video_id) == 11:
                        return f"https://www.youtube.com/watch?v={video_id}"
                
                # –ò–∑ query parameters –∏–ª–∏ /v/
                parsed = urlparse(url)
                if 'v' in parse_qs(parsed.query):
                    video_id = parse_qs(parsed.query)['v'][0][:11]
                    if len(video_id) == 11:
                        base = f"{parsed.scheme}://{parsed.netloc}{parsed.path}"
                        return f"{base}?v={video_id}"
                
                # /embed/ –∏–ª–∏ /shorts/
                if '/embed/' in url:
                    video_id_match = re.search(r'/embed/([a-zA-Z0-9_-]{11})', url)
                    if video_id_match:
                        video_id = video_id_match.group(1)
                        return f"https://www.youtube.com/watch?v={video_id}"
                
                # /shorts/
                if '/shorts/' in url:
                    video_id_match = re.search(r'/shorts/([a-zA-Z0-9_-]{11})', url)
                    if video_id_match:
                        video_id = video_id_match.group(1)
                        return f"https://www.youtube.com/watch?v={video_id}"
                
                # /v/ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                if '/v/' in url:
                    video_id_match = re.search(r'/v/([a-zA-Z0-9_-]{11})', url)
                    if video_id_match:
                        video_id = video_id_match.group(1)
                        return f"https://www.youtube.com/watch?v={video_id}"
            
            # Instagram stories (fallback)
            if platform == "Instagram" and '/stories/' in url and not url.startswith('http'):
                return f"https://www.instagram.com{url}"
            
            # TikTok fallback (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
            if platform == "TikTok" and not url.startswith('http'):
                return f"https://www.tiktok.com{url}"
            
            return url
        except:
            return url

    def _is_valid_url(self, text: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è URL"""
        try:
            original = text.strip()
            if not original:
                return False, ""
                
            if not original.startswith(('http', 'https')):
                normalized = 'https://' + original
            else:
                normalized = original

            parsed = urlparse(normalized)
            return parsed.scheme in ['http', 'https'] and parsed.netloc, normalized
        except:
            return False, text

    async def _safe_run_in_executor(self, func, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π run_in_executor —Å fallback –¥–ª—è Heroku/–º–æ–¥—É–ª–µ–π"""
        try:
            loop = asyncio.get_running_loop()
            if loop:
                return await loop.run_in_executor(None, func, *args, **kwargs)
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –Ω–∞–ø—Ä—è–º—É—é
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    future = executor.submit(func, *args, **kwargs)
                    return future.result()
        except RuntimeError as e:
            if "no running event loop" in str(e):
                logger.warning(f"Loop error fallback: {e}")
                # Python 3.9+ to_thread
                if hasattr(asyncio, 'to_thread'):
                    return await asyncio.to_thread(func, *args, **kwargs)
                else:
                    # –°—Ç–∞—Ä—ã–π fallback
                    with concurrent.futures.ThreadPoolExecutor() as executor:
                        future = executor.submit(func, *args, **kwargs)
                        return future.result()
            else:
                raise e

    async def _progress_processor(self, progress_instance):
        """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (async)"""
        while True:
            try:
                data = await self.progress_queue.get()
                if data is None:  # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    break
                downloaded, total, speed = data
                await progress_instance.update_progress(downloaded, total, speed)
                self.progress_queue.task_done()
            except asyncio.QueueEmpty:
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.debug(f"Progress processor error: {e}")
                await asyncio.sleep(0.1)

    async def _download_generic(self, message: Message, url: str, platform: str, opts_overrides=None):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ fallback –±–µ–∑ cookies"""
        progress_msg = None
        progress_task = None
        try:
            import yt_dlp
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_msg = await utils.answer(message, self.strings("processing").format(type=platform))
            self.progress_instance = DownloadProgress(progress_msg, update_interval=self.config["progress_update_interval"])
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_task = asyncio.create_task(self._progress_processor(self.progress_instance))
            
            # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ (cookies –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            cookiefile = self.config["cookies_path"] if self.config["cookies_path"] else None
            base_opts = {
                'format': 'best[height<=720]/best',
                'outtmpl': f"{self.download_dir}/%(title:.100)s_%(id)s.%(ext)s",
                'quiet': True,
                'cookiefile': cookiefile,
                'progress_hooks': [self._progress_hook],
                'extractor_args': {
                    'generic': {'http_headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}}
                }
            }
            
            # –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏
            platform_opts = {
                'YouTube': {
                    'format': 'bestvideo[height<=720]+bestaudio/best[height<=720]',
                    'merge_output_format': 'mp4',
                    'extractor_args': {'youtube': {'skip': ['hls', 'dash']}}
                },
                'TikTok': {
                    'format': 'best[height<=720]',
                    'extractor_args': {'tiktok': {'mobile': True, 'guest': True}}
                },
                'Instagram': {
                    'format': 'best[height<=720]',
                    'extractor_args': {'instagram': {'login': None}}
                },
                'Twitter': {
                    'format': 'best[height<=720]',
                    'extractor_args': {'twitter': {'guest': True}}
                },
                'Facebook': {
                    'format': 'best[height<=720]',
                    'extractor_args': {'facebook': {'http_headers': {'User-Agent': 'Mozilla/5.0'}}}
                },
                'VK': {
                    'format': 'best[height<=720]',
                    'extractor_args': {'vk': {'https_header': 'Mozilla/5.0'}}
                },
                'SoundCloud': {
                    'format': 'bestaudio/best',
                    'postprocessors': [{'key': 'FFmpegExtractAudio', 'preferredcodec': 'mp3'}]
                },
                'Twitch': {
                    'format': 'best[height<=720]',
                    'extractor_args': {'twitch': {'player_client': 'twitchweb'}}
                },
                'Pinterest': {
                    'format': 'best',
                    'extractor_args': {'generic': {'http_headers': {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                        'Referer': 'https://www.pinterest.com/'
                    }}}
                },
                'Other': {
                    'format': 'best',
                    'extractor_args': {'generic': {'http_headers': {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}}}
                }
            }
            
            # Fallback —Ñ–æ—Ä–º–∞—Ç—ã (–¥–ª—è YouTube –±–µ–∑ cookies)
            fallback_formats = [
                'best[height<=720]/best',  # –û—Å–Ω–æ–≤–Ω–æ–π
                'bestvideo[height<=720]+bestaudio[ext=m4a]/best[height<=720]',  # –° –º–µ—Ä–∂–µ–º
                'worst[height<=480]/worst',  # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (fallback –±–µ–∑ auth)
                'bestaudio/best',  # –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ
                'best'  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
            ]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ü–∏–∏
            opts = {**base_opts, **platform_opts.get(platform, platform_opts.get('Other', {}))}
            if opts_overrides:
                opts.update(opts_overrides)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ (–≤ executor –¥–ª—è consistency)
            def extract_info():
                with yt_dlp.YoutubeDL({'quiet': True, 'no_warnings': True, **{k: v for k, v in opts.items() if k in ['cookiefile', 'extractor_args']}}) as ydl:
                    return ydl.extract_info(url, download=False)
            
            info = await self._safe_run_in_executor(extract_info)
                
            if not info or not info.get('id'):
                logger.error(f"No info or ID for {url}")
                await self._safe_edit_or_reply(progress_msg, message, self.strings("download_failed").format(platform=platform))
                if progress_msg:
                    try:
                        await progress_msg.delete()
                    except:
                        pass
                if progress_task:
                    self.progress_queue.put_nowait(None)  # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    await progress_task
                return False, None

            title = info.get('title', 'Unknown')[:50]
            duration = info.get('duration', 0)
            filesize = info.get('filesize', 0) or 0  # Fallback 0
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_instance.total_size = filesize
            
            duration_str = f"{duration}s" if duration else "N/A"
            info_text = self.strings("video_info").format(
                title=title,
                source=platform,
                duration=duration_str,
                size=self._format_size(filesize)
            )
            await self._safe_edit_or_reply(progress_msg, message, info_text)

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å fallback
            download_success = False
            current_fallback = 0
            for fmt in fallback_formats:
                try:
                    current_fallback += 1
                    current_opts = opts.copy()
                    current_opts['format'] = fmt
                    
                    # –î–ª—è YouTube fallback –±–µ–∑ cookies
                    if platform == "YouTube" and current_fallback > 1 and cookiefile:
                        current_opts['cookiefile'] = None  # –û—Ç–∫–ª—é—á–∞–µ–º cookies –¥–ª—è fallback
                        await self._safe_edit_or_reply(progress_msg, message, self.strings("youtube_auth_error"))
                        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É fallback'–∞–º–∏
                    
                    logger.info(f"Trying fallback {current_fallback}/{len(fallback_formats)} for {platform}: {fmt}")
                    
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ executor
                    def download_func():
                        with yt_dlp.YoutubeDL(current_opts) as ydl:
                            ydl.download([url])
                    
                    await self._safe_run_in_executor(download_func)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
                    files = glob.glob(f"{self.download_dir}/*{info['id']}*")
                    if files:
                        latest_file = max(files, key=os.path.getctime)
                        if os.path.exists(latest_file) and os.path.getsize(latest_file) > 0:
                            file_size = os.path.getsize(latest_file)
                            if file_size > 50 * 1024 * 1024:
                                await self._safe_edit_or_reply(progress_msg, message, self.strings("large_file"))
                                if progress_msg:
                                    try:
                                        await progress_msg.delete()
                                    except:
                                        pass
                                if progress_task:
                                    self.progress_queue.put_nowait(None)
                                    await progress_task
                                return False, None
                            download_success = True
                            self.progress_instance.finish(file_size)
                            break
                        else:
                            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
                            list_opts = current_opts.copy()
                            list_opts['listformats'] = True
                            def list_formats():
                                with yt_dlp.YoutubeDL(list_opts) as ydl_list:
                                    return ydl_list.extract_info(url, download=False).get('formats', [])
                            
                            formats_info = await self._safe_run_in_executor(list_formats)
                            logger.info(f"Available formats ({len(formats_info)}): { [f.get('format_id') for f in formats_info[:3]] }")
                    else:
                        logger.warning(f"No file for fallback {current_fallback}")
                        
                except Exception as fmt_error:
                    error_str = str(fmt_error)
                    if any(err in error_str for err in ["Requested format is not available", "Unable to extract", "Sign in to confirm"]):
                        logger.warning(f"Fallback {current_fallback} failed ({platform}): {error_str[:50]}. Trying next...")
                        await asyncio.sleep(0.3)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É fallback'–∞–º–∏
                        continue
                    else:
                        logger.error(f"Unexpected error in fallback {current_fallback}: {fmt_error}")
                        break

            if not download_success:
                logger.error(f"All fallbacks failed for {url} ({platform}) - loop/extractor error")
                await self._safe_edit_or_reply(progress_msg, message, self.strings("download_failed").format(platform=platform))
                if progress_msg:
                    try:
                        await progress_msg.delete()
                    except:
                        pass
                if progress_task:
                    self.progress_queue.put_nowait(None)
                    await progress_task
                return False, None

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            files = glob.glob(f"{self.download_dir}/*{info['id']}*")
            latest_file = max(files, key=os.path.getctime)
            
            self.temp_files.add(latest_file)
            
            # –ü–æ–¥–ø–∏—Å—å
            caption = f"üìπ <b>{title}</b>\nüîó <b>{platform} (–ø—Ä–æ–≥—Ä–µ—Å—Å ‚úì)</b>\n{self._format_size(os.path.getsize(latest_file))}"
            
            await self.client.send_file(
                message.to_id,
                latest_file,
                caption=caption,
                reply_to=message.reply_to_msg_id,
                supports_streaming=True
            )
            
            # –û—á–∏—Å—Ç–∫–∞
            self.progress_instance = None
            if progress_msg:
                try:
                    await progress_msg.delete()
                except:
                    pass
            if progress_task:
                self.progress_queue.put_nowait(None)
                await progress_task
            return True, title

        except Exception as e:
            error_str = str(e)
            if "Sign in to confirm" in error_str and platform == "YouTube":
                await self._safe_edit_or_reply(progress_msg, message, self.strings("youtube_auth_error"))
                if progress_task:
                    self.progress_queue.put_nowait(None)
                    await progress_task
                return False, None
            logger.error(f"{platform} download error: {e}")
            await self._safe_edit_or_reply(progress_msg, message, self.strings("download_failed").format(platform=platform))
            if progress_msg:
                try:
                    await progress_msg.delete()
                except:
                    pass
            if progress_task:
                self.progress_queue.put_nowait(None)
                await progress_task
            return False, None

    async def _safe_edit_or_reply(self, edit_msg, original_msg, text):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç"""
        try:
            if edit_msg:
                await edit_msg.edit(text)
        except MessageNotModifiedError:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        except Exception as e:
            logger.debug(f"Edit failed, replying: {e}")
            if original_msg:
                await original_msg.reply(text)
        except:
            if original_msg:
                await original_msg.reply(text)

    def _progress_hook(self, d):
        """–•—É–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ yt-dlp (sync, thread-safe)"""
        try:
            if self.progress_instance and d['status'] == 'downloading':
                downloaded = d.get('downloaded_bytes', 0)
                total = d.get('total_bytes') or d.get('total_bytes_estimate', 0)
                speed = d.get('speed', 0)
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç loop)
                try:
                    self.progress_queue.put_nowait((downloaded, total, speed))
                except asyncio.QueueFull:
                    logger.debug("Progress queue full, skipping update")
                    
            elif d['status'] == 'finished':
                logger.info(f"Download finished: {d.get('filename', 'Unknown')}")
                
        except Exception as e:
            logger.debug(f"Progress hook error: {e}")

    @loader.command()
    async def dompcmd(self, message: Message):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –±–ª–æ–∫ –∫–æ–¥–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        try:
            logger.info(f"üöÄ DOMP: {message.sender_id} in {message.chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ yt-dlp
            if not self.yt_dlp_version:
                await utils.answer(message, self.strings("install_yt_dlp"))
                return

            await utils.answer(message, self.strings("working"))
            
            # –ê–ù–ê–õ–ò–ó –†–ï–ü–õ–ê–Ø
            reply = None
            try:
                reply = await message.get_reply_message()
            except Exception as e:
                logger.debug(f"No reply available: {e}")

            url = None
            platform = None

            if reply:
                has_content, content_data = self._is_reply_content(reply)
                if has_content:
                    logger.info(f"‚Üí Reply content: {content_data.get('type', 'unknown')}")
                    
                    # –†–ï–ü–õ–ê–ô –ù–ê –°–°–´–õ–ö–£
                    if content_data.get('type') == 'link':
                        platform = content_data.get('platform', 'Unknown')
                        url = content_data['url']
                        
                        await utils.answer(message, self.strings("link_reply").format(
                            platform=platform
                        ))
                        
                        success, title = await self._download_generic(message, url, platform)
                        if success:
                            await self._safe_edit_or_reply(None, message, self.strings("success").format(
                                type=f"{platform} (–∞–≤—Ç–æ–±–ª–æ–∫ + –ø—Ä–æ–≥—Ä–µ—Å—Å)"
                            ))
                            await self._safe_delete_command(message)
                        else:
                            await self._safe_edit_or_reply(None, message, self.strings("download_failed").format(platform=platform))
                        return
                    
                    # –†–ï–ü–õ–ê–ô –ù–ê –ú–ï–î–ò–ê
                    elif content_data.get('type', '').endswith('_media'):
                        media_type = content_data['media_type']
                        file_ext = content_data['file_ext']
                        
                        await utils.answer(message, self.strings("media_reply").format(
                            filename=f"{media_type}.{file_ext}"
                        ))
                        
                        success = await self._handle_reply_media(message, reply, media_type, file_ext)
                        if success:
                            await self._safe_edit_or_reply(None, message, self.strings("reply_success").format(
                                filename=f"{media_type}.{file_ext}",
                                size="–ó–∞–≥—Ä—É–∂–µ–Ω–æ"
                            ))
                            await self._safe_delete_command(message)
                        else:
                            await self._safe_edit_or_reply(None, message, self.strings("not_media"))
                        return

            # –ï–°–õ–ò –ù–ï–¢ –†–ï–ü–õ–ê–Ø - –ü–†–û–í–ï–†–Ø–ï–ú –ê–†–ì–£–ú–ï–ù–¢–´
            args = utils.get_args_raw(message).strip()
            logger.debug(f"Args: {args}")
            
            if not args:
                # –ù–µ—Ç —Ä–µ–ø–ª–∞—è –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
                await utils.answer(message, self.strings("no_content"))
                await asyncio.sleep(1)
                await utils.answer(message, self.strings("reply_help"))
                return

            # –í–ê–õ–ò–î–ê–¶–ò–Ø URL –ò–ó –ê–†–ì–£–ú–ï–ù–¢–û–í
            is_valid, normalized_url = self._is_valid_url(args)
            if not is_valid:
                await utils.answer(message, self.strings("no_content"))
                return
            else:
                url = normalized_url
                platform = self._detect_platform(url)
                logger.debug(f"Detected platform: {platform}, Fixed URL: {url}")

            # –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–õ–ê–¢–§–û–†–ú–´ (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)
            if not platform:
                platform = self._detect_platform(url)

            fixed_url = self._fix_url(url, platform)
            
            if fixed_url != url:
                await utils.answer(message, self.strings("url_fixed"))

            await utils.answer(message, self.strings("source_detected").format(platform=platform))

            # –°–ö–ê–ß–ò–í–ê–ù–ò–ï –° –ê–í–¢–û–ë–õ–û–ö–û–ú –ö–û–î–ê + –ü–†–û–ì–†–ï–°–°
            success, title = await self._download_generic(message, fixed_url, platform)
            
            if success:
                await self._safe_delete_command(message)
                await self._safe_edit_or_reply(None, message, self.strings("success").format(type=f"{platform} (–∞–≤—Ç–æ–±–ª–æ–∫ + –ø—Ä–æ–≥—Ä–µ—Å—Å)"))
            else:
                await self._safe_edit_or_reply(None, message, self.strings("download_failed").format(platform=platform))

        except FloodWaitError as e:
            seconds = getattr(e, 'seconds', 60)
            await utils.answer(message, f"‚è≥ <b>–§–ª—É–¥: {seconds}—Å</b>")
        except Exception as e:
            error_msg = str(e)[:120]
            logger.error(f"DOMP error: {e}", exc_info=True)
            await self._safe_edit_or_reply(None, message, self.strings("error").format(error_msg))

    @loader.command()
    async def vdfixcmd(self, message: Message):
        """–†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL"""
        args = utils.get_args_raw(message).strip()
        if not args:
            await utils.answer(message, "–£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <code>.vdfix https://example.com</code>")
            return
        
        is_valid, fixed = self._is_valid_url(args)
        platform = self._detect_platform(fixed if is_valid else args)
        fixed_url = self._fix_url(fixed if is_valid else args, platform)
        
        await utils.answer(message, f"üîß <b>–û—Ä–∏–≥–∏–Ω–∞–ª:</b> {args}\nüåê <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform}\n‚úÖ <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π:</b> {fixed_url}")

    async def _safe_delete_command(self, message: Message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
        try:
            if message.out and message.id:
                await asyncio.sleep(1.5)
                await message.delete()
        except MessageNotModifiedError:
            pass
        except Exception:
            pass

    async def _handle_reply_media(self, message: Message, reply: Message, media_type: str, file_ext: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ä–µ–ø–ª–∞—è"""
        try:
            logger.info(f"‚Üí Reply media: {media_type} ({file_ext})")
            
            # –ò–º—è —Ñ–∞–π–ª–∞
            timestamp = int(asyncio.time.time())
            chat_id = abs(utils.get_chat_id(message))
            
            if media_type == 'video':
                filename = f"{self.download_dir}/reply_video_{chat_id}_{timestamp}.{file_ext}"
            elif media_type == 'gif':
                filename = f"{self.download_dir}/reply_gif_{chat_id}_{timestamp}.gif"
            elif media_type == 'audio':
                filename = f"{self.download_dir}/reply_audio_{chat_id}_{timestamp}.{file_ext}"
            else:
                filename = f"{self.download_dir}/reply_{media_type}_{chat_id}_{timestamp}.{file_ext}"
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            media_path = await reply.download_media(file=filename)
            
            if not media_path or not os.path.exists(media_path):
                return False

            file_size = os.path.getsize(media_path)
            if file_size == 0 or file_size > 50 * 1024 * 1024:
                return False

            self.temp_files.add(media_path)
            
            # –ü–æ–¥–ø–∏—Å—å
            base_caption = f"üíæ <b>–ò–∑ —Ä–µ–ø–ª–∞—è</b>\nüìÅ <b>{os.path.basename(media_path)}</b>\nüíæ <b>{self._format_size(file_size)}</b>"
            
            if media_type == 'video' and hasattr(reply, 'video') and reply.video:
                duration = getattr(reply.video, 'duration', 0)
                if duration:
                    base_caption += f"\n‚è± <b>{duration}—Å</b>"

            # –û—Ç–ø—Ä–∞–≤–∫–∞
            send_kwargs = {
                'file': media_path,
                'caption': base_caption,
                'reply_to': message.reply_to_msg_id
            }
            
            if media_type == 'gif':
                send_kwargs['attributes'] = [DocumentAttributeAnimated()]
            elif media_type in ['audio']:
                send_kwargs['attributes'] = [DocumentAttributeFilename(os.path.basename(media_path))]
            elif media_type == 'video':
                send_kwargs['supports_streaming'] = True

            await self.client.send_file(message.to_id, **send_kwargs)
            return True

        except Exception as e:
            logger.error(f"Reply media error: {e}")
            return False

    def _format_size(self, size: int) -> str:
        """–§–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞ (B/KB/MB/GB)"""
        if size < 1024:
            return f"{size} B"
        elif size < 1024**2:
            return f"{size / 1024:.1f} KB"
        elif size < 1024**3:
            return f"{size / (1024**2):.1f} MB"
        else:
            return f"{size / (1024**3):.1f} GB"

    @loader.command()
    async def vdtest(self, message: Message):
        """–¢–µ—Å—Ç"""
        version = self.yt_dlp_version or "N/A"
        ffmpeg = "‚úì" if self.ffmpeg_available else "‚úó"
        cookies_status = "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ" if not self.config["cookies_path"] else "‚úì"
        status = "‚úÖ" if self.yt_dlp_version else "‚ùå"
        
        test_text = self.strings("debug_info").format(
            version=version,
            ffmpeg=ffmpeg,
            cookies_status=cookies_status,
            count="100+",
            status=status
        )
        
        await utils.answer(message, test_text)

    @loader.command()
    async def vdreply(self, message: Message):
        """–ü–æ–º–æ—â—å –ø–æ —Ä–µ–ø–ª–∞—é"""
        await utils.answer(message, self.strings("reply_help"))

    @loader.command()
    async def vdplatforms(self, message: Message):
        """–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        await utils.answer(message, self.strings("platforms_list"))

    @loader.command()
    async def vdinstall(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        await utils.answer(message, self.strings("terminal_install"))

    @loader.command()
    async def vdhelp(self, message: Message):
        """–ü–æ–º–æ—â—å (cookies, —É—Å—Ç–∞–Ω–æ–≤–∫–∞)"""
        args = utils.get_args_raw(message).strip().lower()
        if 'cookies' in args:
            await utils.answer(message, self.strings("cookies_help"))
        else:
            await utils.answer(message, self.strings("terminal_install"))

    async def _cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞"""
        for temp_file in list(self.temp_files):
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
            except:
                pass
            self.temp_files.discard(temp_file)
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        try:
            while not self.progress_queue.empty():
                self.progress_queue.get_nowait()
        except:
            pass

    async def on_unload(self):
        await self._cleanup_temp_files()